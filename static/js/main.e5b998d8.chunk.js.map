{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","completed","title","classNames","TodoList","todos","map","username","userId","getUserById","users","find","defaultTodo","undefined","defaultTouched","titleTouched","userTouched","App","useState","usersFromServer","todosFromServer","userById","listTodos","setListTodos","count","setCount","setTodo","touched","setTouched","action","method","onSubmit","event","preventDefault","currentTouched","currentTodo","Math","max","todoMap","currentListTodos","cur","type","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5b998d8.chunk.js","sourcesContent":["import { User } from '../../types/types';\n\ninterface Props {\n  user: User\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const {\n    name,\n    email,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { TodoAndUser } from '../../types/types';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: TodoAndUser\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    user,\n    id,\n    completed,\n    title,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      { user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { TodoAndUser } from '../../types/types';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: TodoAndUser[]\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      )))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport { Todo, User, TodoAndUser } from './types/types';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUserById(users: User[], userId: number): User | undefined {\n  return users.find(user => user.id === userId);\n}\n\nfunction connectUsersToTodos(\n  todos: Todo[],\n  users: User[],\n): TodoAndUser[] {\n  return todos.map(todo => {\n    const { userId } = todo;\n    const userById = getUserById(users, userId);\n\n    return {\n      ...todo,\n      user: userById,\n    };\n  });\n}\n\ninterface DefaultTodo {\n  id: number\n  title: string,\n  completed: boolean\n  user: User | undefined\n  userId: number\n}\n\nconst defaultTodo: DefaultTodo = {\n  id: 0,\n  title: '',\n  completed: false,\n  user: undefined,\n  userId: 0,\n};\n\ninterface Touched {\n  titleTouched: boolean\n  userTouched: boolean\n}\n\nconst defaultTouched: Touched = {\n  titleTouched: false,\n  userTouched: false,\n};\n\nexport const App = () => {\n  const [listTodos, setListTodos]\n    = useState(connectUsersToTodos(todosFromServer, usersFromServer));\n  const [count, setCount] = useState(0);\n  const [todo, setTodo] = useState<DefaultTodo>(defaultTodo);\n  const [touched, setTouched] = useState<Touched>(defaultTouched);\n\n  const {\n    titleTouched,\n    userTouched,\n  } = touched;\n\n  const {\n    title,\n    userId,\n  } = todo;\n\n  const handleSubmitForm = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!todo.user) {\n      setTouched(currentTouched => ({\n        ...currentTouched,\n        userTouched: true,\n      }));\n    }\n\n    if (!todo.title) {\n      setTouched(currentTouched => ({\n        ...currentTouched,\n        titleTouched: true,\n      }));\n    }\n\n    if (!(todo.user && todo.title)) {\n      return;\n    }\n\n    setTodo(currentTodo => ({\n      ...currentTodo,\n      id: Math.max(...listTodos.map(todoMap => todoMap.id)) + 1,\n    }));\n\n    setListTodos(currentListTodos => [todo, ...currentListTodos]);\n    setCount(cur => cur + 1);\n    setTodo(defaultTodo);\n  };\n\n  const handleChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setTodo(currentTodo => ({\n      ...currentTodo,\n      [name]: value,\n    }));\n\n    setTouched(currentTouched => ({\n      ...currentTouched,\n      [`${name}Touched`]: false,\n    }));\n  };\n\n  const handleChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { name, value } = event.target;\n    const user = getUserById(usersFromServer, +value);\n\n    setTodo(currentTodo => ({\n      ...currentTodo,\n      userId: +value,\n      [name]: user,\n    }));\n\n    setTouched(currentTouched => ({\n      ...currentTouched,\n      [`${name}Touched`]: false,\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        key={count}\n        onSubmit={handleSubmitForm}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            name=\"title\"\n            value={title}\n            onChange={handleChangeInput}\n          />\n          {titleTouched && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            name=\"user\"\n            value={userId}\n            onChange={handleChangeSelect}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {userTouched && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={listTodos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}